#define LOG_LOCAL_LEVEL ESP_LOG_INFO
#include "esp_log.h"
#include "esp_wifi.h"
#include "string.h"
#include "wifi.h"

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#define WIFI_STA_SSID "Hungary38"
#define WIFI_STA_PASS "RoagharNET"
#define WIFI_STA_RETRY 3u

#define WIFI_AP_SSID "Movix"
#define WIFI_AP_PASS "0123456789"
#define WIFI_AP_CONN 3u

static const char *TAG = "wifi";
static uint8_t retry = 0u;
static char ip[16] = {0};
static esp_netif_t *apNetif = NULL;
static esp_netif_t *staNetif = NULL;
static esp_event_handler_instance_t wifiEventHandler = NULL;
static esp_event_handler_instance_t ipEventHandler = NULL;

static void WifiEventHandler(void *arg, esp_event_base_t base, int32_t id, void *event)
    TaskHandle_t task = (TaskHandle_t)arg;
    switch (id)
    case WIFI_EVENT_STA_START:
        ESP_LOGD(TAG, "connecting to the AP");
        esp_wifi_connect();
        break;
    case WIFI_EVENT_STA_CONNECTED:
        retry = 0u;
        ESP_LOGI(TAG, "connected");
        xTaskNotify(task, 0u, eNoAction);
        break;
    case WIFI_EVENT_STA_DISCONNECTED:
        if (retry < WIFI_STA_RETRY)
        {
            retry++;
            ESP_LOGD(TAG, "reconnecting... (%d/%d)", retry, WIFI_STA_RETRY);
            esp_wifi_connect();
        else
            ESP_LOGD(TAG, "disconnected");
            xTaskNotify(task, 1u, eSetBits);
        break;
    case WIFI_EVENT_AP_START:
        xTaskNotify(task, 0u, eNoAction);
        break;
    case WIFI_EVENT_AP_STACONNECTED:
        ESP_LOGD(TAG, "station " MACSTR " join, AID=%d", MAC2STR(((wifi_event_ap_staconnected_t *)event)->mac), ((wifi_event_ap_staconnected_t *)event)->aid);
        break;
    case WIFI_EVENT_AP_STADISCONNECTED:
        ESP_LOGD(TAG, "station " MACSTR " leave, AID=%d", MAC2STR(((wifi_event_ap_stadisconnected_t *)event)->mac), ((wifi_event_ap_stadisconnected_t *)event)->aid);
        break;

    default:
        ESP_LOGD(TAG, "wifi event, id: %d", id);
        break;
static void IpEventHandler(void *arg, esp_event_base_t base, int32_t id, void *event)
    switch (id)
    case IP_EVENT_STA_GOT_IP:
        sprintf(ip, IPSTR, IP2STR(&((ip_event_got_ip_t *)event)->ip_info.ip));
        ESP_LOGI(TAG, "ip %s", ip);
        break;
    case IP_EVENT_STA_LOST_IP:
        ESP_LOGI(TAG, "lost ip");
        break;
    default:
        ESP_LOGD(TAG, "ip event, id: %d", id);
        break;
static void WifiStartAp()
    ESP_LOGI(TAG, "start wifi in access point mode");
    ESP_LOGI(TAG, "ssid: %s, password: %s", WIFI_AP_SSID, WIFI_AP_PASS);
    wifi_config_t apConfig = {
        .ap = {
            .ssid = WIFI_AP_SSID,
            .ssid_len = strlen(WIFI_AP_SSID),
            .password = WIFI_AP_PASS,
            .max_connection = WIFI_AP_CONN,
            .authmode = WIFI_AUTH_WPA_WPA2_PSK,
    esp_wifi_set_mode(WIFI_MODE_AP);
    esp_wifi_set_config(ESP_IF_WIFI_AP, &apConfig);
    esp_wifi_start();
    esp_netif_ip_info_t ipInfo;
    esp_netif_get_ip_info(apNetif, &ipInfo);
    sprintf(ip, IPSTR, IP2STR(&ipInfo.ip));
    ESP_LOGI(TAG, "ip %s", ip);
static void WifiStartSta(
    ESP_LOGI(TAG, "start wifi in station mode");
    ESP_LOGI(TAG, "ssid: %s, password: %s", WIFI_STA_SSID, WIFI_STA_PASS);
    wifi_config_t staConfig = {
        .sta = {
            .ssid = WIFI_STA_SSID,
            .password = WIFI_STA_PASS,
            .threshold = {
                .authmode = WIFI_AUTH_WPA2_PSK,
            .pmf_cfg = {
                .capable = true,
                .required = false,

    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(ESP_IF_WIFI_STA, &staConfig);
    esp_wifi_start();
static void WifiStop(
    ESP_LOGI(TAG, "stop wifi");
    esp_wifi_stop();
    esp_wifi_restore()
    vTaskDelay(pdMS_TO_TICKS(1000))
const char *GetIPAddress()
    return ip;
esp_err_t WifiInit(uint32_t mode)
    esp_err_t err = ESP_OK;

    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());

    apNetif = esp_netif_create_default_wifi_ap();
    staNetif = esp_netif_create_default_wifi_sta();

    wifi_init_config_t initConfig = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&initConfig));

    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &WifiEventHandler, xTaskGetCurrentTaskHandle(), &wifiEventHandler));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, ESP_EVENT_ANY_ID, &IpEventHandler, xTaskGetCurrentTaskHandle(), &ipEventHandler));
    if (1u & mode)
        WifiStartAp()
        if (pdFALSE == xTaskNotifyWait(0u, 1u, &mode, pdMS_TO_TICKS(30000)))
            WifiStop();
            err = ESP_ERR_TIMEOUT;
    else
        WifiStartSta()
        if (pdFALSE == xTaskNotifyWait(0u, 1u, &mode, pdMS_TO_TICKS(30000)))
            WifiStop();
            err = ESP_ERR_TIMEOUT;
        if (1u & mode)
            ESP_LOGW(TAG, "connect to access point failed")
            WifiStop();
            WifiStartAp();
            if (pdFALSE == xTaskNotifyWait(0u, 1u, &mode, pdMS_TO_TICKS(30000)))
                WifiStop();
                err = ESP_ERR_TIMEOUT
    if (ESP_OK == err)
        ESP_LOGI(TAG, "init done");
    else
        ESP_LOGE(TAG, "init fail");
    return err;
